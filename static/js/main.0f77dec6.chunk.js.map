{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formatTime","t","toLocaleTimeString","hour","minute","minutesToMilliseconds","mins","App","_useState","useState","_useState2","Object","slicedToArray","time","setTime","_useState3","_useState4","roundLength","setRoundLength","_useState5","_useState6","breakLength","setBreakLength","_useState7","_useState8","lunchBreakLength","setlunchBreakLength","_useState9","_useState10","numberOfRounds","setNumberOfRounds","rounds","_time$split","split","_time$split2","hours","minutes","lunchBreak","parseInt","startTime","Date","endTime","setHours","setMinutes","results","i","getTime","round","name","concat","start","end","push","Math","floor","breakRound","generateRounds","raw","map","r","join","react_default","a","createElement","components","className","type","value","onChange","e","target","min","max","placeholder","width","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAIMA,SAAa,SAAAC,GACjB,OAAOA,EAAEC,mBAAmB,QAAS,CACnCC,KAAM,UACNC,OAAQ,cAINC,EAAwB,SAAAC,GAAI,OAAW,GAAPA,EAAY,KAuKnCC,EAzHH,WAAM,IAAAC,EACQC,mBAAS,SADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACHI,EADGJ,EAAA,GAAAK,EAEsBN,mBAAS,IAF/BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAEIE,EAFJF,EAAA,GAAAG,EAGsBV,mBAAS,IAH/BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGTE,EAHSD,EAAA,GAGIE,EAHJF,EAAA,GAAAG,EAIgCd,mBAAS,IAJzCe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAITE,EAJSD,EAAA,GAISE,EAJTF,EAAA,GAAAG,EAK4BlB,mBAAS,GALrCmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAKTE,EALSD,EAAA,GAKOE,EALPF,EAAA,GAOVG,EAnDe,SACrBlB,EACAI,EACAI,EACAQ,EACAJ,GACG,IAAAO,EACsBnB,EAAKoB,MAAM,KADjCC,EAAAvB,OAAAC,EAAA,EAAAD,CAAAqB,EAAA,GACIG,EADJD,EAAA,GACWE,EADXF,EAAA,GAGGG,EAAaC,SAASb,EAAkB,IACxCc,EAAY,IAAIC,KAChBC,EAAU,IAAID,KACpBD,EAAUG,SAASP,GACnBI,EAAUI,WAAWP,GAGrB,IADA,IAAIQ,EAAU,GACLC,EAAI,EAAGA,GAAKhB,EAAgBgB,IAAK,CACxCJ,EAAQ3B,QACNyB,EAAUO,UAAYzC,EAAsBiC,SAASrB,EAAa,MAEpE,IAAI8B,EAAQ,CACVC,KAAI,SAAAC,OAAWJ,GACfK,MAAOlD,EAAWuC,GAClBY,IAAKnD,EAAWyC,IAGlB,GADAG,EAAQQ,KAAKL,GACTV,EAAa,GAAKgB,KAAKC,MAAMzB,EAAiB,KAAOgB,EAAG,CAE1DJ,EAAQ3B,QAAQ2B,EAAQK,UAAYzC,EAAsBgC,IAC1D,IAAIkB,EAAa,CACfP,KAAM,cACNE,MAAOH,EAAMI,IACbA,IAAKnD,EAAWyC,IAElBG,EAAQQ,KAAKG,GACbhB,EAAUzB,QAAQ2B,EAAQK,gBAE1BP,EAAUzB,QAAQ2B,EAAQK,UAAYzC,EAAsBgB,IAIhE,OAAOuB,EAUQY,CACb3C,EACAI,EACAI,EACAQ,EACAJ,GAGIgC,EAAG,mCAAAR,OAETlB,EACC2B,IACC,SAAAC,GAAC,SAAAV,OACIU,EAAEX,KADN,KAAAC,OACyB,gBAAXU,EAAEX,KAAyB,GAAK,OAD9C,KAAAC,OACwDU,EAAET,MAD1D,QAAAD,OAEGU,EAAER,OAGPS,KAAK,MATG,SAYT,OACEC,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAA,MAAD,kCAEFH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACC,EAAA,MAAD,KACEH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAAjB,cACAJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,MAAD,CACEE,KAAK,OACLC,MAAOtD,EACPuD,SAAU,SAAAC,GAAC,OAAIvD,EAAQuD,EAAEC,OAAOH,YAItCN,EAAAC,EAAAC,cAACC,EAAA,MAAD,KACEH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAAjB,0BACAJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,MAAD,CACEE,KAAK,SACLK,IAAI,IACJJ,MAAOlD,EACPmD,SAAU,SAAAC,GAAC,OAAInD,EAAemC,KAAKmB,IAAI,EAAGH,EAAEC,OAAOH,SACnDM,YAAY,iBAIlBZ,EAAAC,EAAAC,cAACC,EAAA,MAAD,KACEH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAAjB,kCACAJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,MAAD,CACEE,KAAK,SACLK,IAAI,IACJJ,MAAO9C,EACP+C,SAAU,SAAAC,GAAC,OAAI/C,EAAe+B,KAAKmB,IAAI,EAAGH,EAAEC,OAAOH,SACnDM,YAAY,iBAIlBZ,EAAAC,EAAAC,cAACC,EAAA,MAAD,KACEH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAAjB,yBACAJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,MAAD,CACEE,KAAK,SACLK,IAAI,IACJJ,MAAO1C,EACP2C,SAAU,SAAAC,GAAC,OAAI3C,EAAoB2B,KAAKmB,IAAI,EAAGH,EAAEC,OAAOH,SACxDM,YAAY,iBAIlBZ,EAAAC,EAAAC,cAACC,EAAA,MAAD,KACEH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SAAjB,oBACAJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,MAAD,CACEE,KAAK,SACLK,IAAI,IACJJ,MAAOtC,EACPuC,SAAU,SAAAC,GAAC,OAAIvC,EAAkBuB,KAAKmB,IAAI,EAAGH,EAAEC,OAAOH,cAK9DN,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACC,EAAA,SAAD,iBACAH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,QAAQS,MAAM,OAC7Bb,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBAGJF,EAAAC,EAAAC,cAAA,aACGhC,EAAO2B,IAAI,SAAAC,GAAC,OACXE,EAAAC,EAAAC,cAAA,MAAIY,IAAKhB,EAAEX,MACTa,EAAAC,EAAAC,cAAA,UAAKJ,EAAEX,MACPa,EAAAC,EAAAC,cAAA,UAAKJ,EAAET,OACPW,EAAAC,EAAAC,cAAA,UAAKJ,EAAER,UAMfU,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAON,OC/JGmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0f77dec6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, SubTitle, Title, Field, Control, Input } from \"reactbulma\";\nimport \"./App.css\";\n\nconst formatTime = t => {\n  return t.toLocaleTimeString(\"sv-SE\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  });\n};\n\nconst minutesToMilliseconds = mins => mins * 60 * 1000;\n\nconst generateRounds = (\n  time,\n  roundLength,\n  breakLength,\n  numberOfRounds,\n  lunchBreakLength\n) => {\n  const [hours, minutes] = time.split(\":\");\n\n  const lunchBreak = parseInt(lunchBreakLength, 10);\n  const startTime = new Date();\n  const endTime = new Date();\n  startTime.setHours(hours);\n  startTime.setMinutes(minutes);\n\n  let results = [];\n  for (let i = 1; i <= numberOfRounds; i++) {\n    endTime.setTime(\n      startTime.getTime() + minutesToMilliseconds(parseInt(roundLength, 10))\n    );\n    let round = {\n      name: `Round ${i}`,\n      start: formatTime(startTime),\n      end: formatTime(endTime)\n    };\n    results.push(round);\n    if (lunchBreak > 0 && Math.floor(numberOfRounds / 2) === i) {\n      // Lunch time!\n      endTime.setTime(endTime.getTime() + minutesToMilliseconds(lunchBreak));\n      let breakRound = {\n        name: \"Lunch Break\",\n        start: round.end,\n        end: formatTime(endTime)\n      };\n      results.push(breakRound);\n      startTime.setTime(endTime.getTime());\n    } else {\n      startTime.setTime(endTime.getTime() + minutesToMilliseconds(breakLength));\n    }\n  }\n\n  return results;\n};\n\nconst App = () => {\n  const [time, setTime] = useState(\"10:00\");\n  const [roundLength, setRoundLength] = useState(75);\n  const [breakLength, setBreakLength] = useState(15);\n  const [lunchBreakLength, setlunchBreakLength] = useState(60);\n  const [numberOfRounds, setNumberOfRounds] = useState(6);\n\n  const rounds = generateRounds(\n    time,\n    roundLength,\n    breakLength,\n    numberOfRounds,\n    lunchBreakLength\n  );\n\n  const raw = `\\`\\`\\`\nRound #      Start    End\n${rounds\n  .map(\n    r =>\n      `${r.name} ${r.name === \"Lunch Break\" ? \"\" : \"    \"} ${r.start}    ${\n        r.end\n      }`\n  )\n  .join(\"\\n\")}\n\\`\\`\\``;\n\n  return (\n    <Container>\n      <header>\n        <Title>Tournament Time Schedule</Title>\n      </header>\n      <section>\n        <Field>\n          <label className=\"label\">Start time</label>\n          <Control>\n            <Input\n              type=\"time\"\n              value={time}\n              onChange={e => setTime(e.target.value)}\n            />\n          </Control>\n        </Field>\n        <Field>\n          <label className=\"label\">Round length (minutes)</label>\n          <Control>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              value={roundLength}\n              onChange={e => setRoundLength(Math.max(1, e.target.value))}\n              placeholder=\"in minutes\"\n            />\n          </Control>\n        </Field>\n        <Field>\n          <label className=\"label\">Break between rounds (minutes)</label>\n          <Control>\n            <Input\n              type=\"number\"\n              min=\"0\"\n              value={breakLength}\n              onChange={e => setBreakLength(Math.max(0, e.target.value))}\n              placeholder=\"in minutes\"\n            />\n          </Control>\n        </Field>\n        <Field>\n          <label className=\"label\">Lunch break (minutes)</label>\n          <Control>\n            <Input\n              type=\"number\"\n              min=\"0\"\n              value={lunchBreakLength}\n              onChange={e => setlunchBreakLength(Math.max(0, e.target.value))}\n              placeholder=\"in minutes\"\n            />\n          </Control>\n        </Field>\n        <Field>\n          <label className=\"label\">Number of rounds</label>\n          <Control>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              value={numberOfRounds}\n              onChange={e => setNumberOfRounds(Math.max(1, e.target.value))}\n            />\n          </Control>\n        </Field>\n      </section>\n      <section>\n        <SubTitle>Schedule</SubTitle>\n        <table className=\"table\" width=\"400\">\n          <thead>\n            <tr>\n              <th>Round</th>\n              <th>Start</th>\n              <th>End</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rounds.map(r => (\n              <tr key={r.name}>\n                <td>{r.name}</td>\n                <td>{r.start}</td>\n                <td>{r.end}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <p>Slack:</p>\n        <pre>\n          <code>{raw}</code>\n        </pre>\n      </section>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}